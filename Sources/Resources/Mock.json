{
    "Packages/AppFeature/Sources/AppFeature.swift": "import SwiftUI\n\npublic struct AppFeatureView: View {\n    public init() {}\n    public var body: some View {\n        Text(\"Welcome to AppFeature\")\n            .font(.title)\n            .padding()\n    }\n}",
    "Packages/TradeFeature/Sources/Models/Money.swift": "import Foundation\n\npublic struct Money: Equatable, Codable, Hashable {\n    public let amount: Decimal\n    public let currency: String\n    \n    public init(amount: Decimal, currency: String) {\n        self.amount = amount\n        self.currency = currency\n    }\n}\n",
    "Packages/TradeFeature/Sources/ViewModels/TradeInputViewModel.swift": "import Foundation\nimport Combine\n\npublic class TradeInputViewModel: ObservableObject {\n    @Published public var amount: String = \"\"\n    @Published public var currency: String = \"USD\"\n    \n    public init() {}\n    \n    public func clear() {\n        amount = \"\"\n        currency = \"USD\"\n    }\n    \n    public var currentMoney: Money? {\n        guard let decimal = Decimal(string: amount) else { return nil }\n        return Money(amount: decimal, currency: currency)\n    }\n}\n",
    "Packages/TradeFeature/Sources/Views/TradeInputView.swift": "import SwiftUI\n\npublic struct TradeInputView: View {\n    @ObservedObject private var viewModel: TradeInputViewModel\n    \n    public init(viewModel: TradeInputViewModel = TradeInputViewModel()) {\n        self.viewModel = viewModel\n    }\n    \n    public var body: some View {\n        Form {\n            Section(header: Text(\"Trade Input\")) {\n                TextField(\"Amount\", text: $viewModel.amount)\n                    .keyboardType(.decimalPad)\n                TextField(\"Currency\", text: $viewModel.currency)\n            }\n            Button(\"Clear\") {\n                viewModel.clear()\n            }\n        }\n        .navigationTitle(\"Input Trade\")\n    }\n}\n",
    "Packages/TradeFeature/Sources/TradeFeature.swift": "import SwiftUI\n\npublic struct TradeFeatureEntryView: View {\n    public init() {}\n    public var body: some View {\n        NavigationView {\n            TradeInputView()\n        }\n    }\n}",
    "Packages/TradeFeature/Sources/Tests/TradeInputViewModelTests.swift": "import XCTest\n@testable import TradeFeature\n\nfinal class TradeInputViewModelTests: XCTestCase {\n    func testInitialValues() {\n        let viewModel = TradeInputViewModel()\n        XCTAssertEqual(viewModel.amount, \"\")\n        XCTAssertEqual(viewModel.currency, \"USD\")\n    }\n    \n    func testCurrentMoneyWithValidAmount() {\n        let viewModel = TradeInputViewModel()\n        viewModel.amount = \"123.45\"\n        viewModel.currency = \"EUR\"\n        let money = viewModel.currentMoney\n        XCTAssertNotNil(money)\n        XCTAssertEqual(money?.amount, Decimal(string: \"123.45\"))\n        XCTAssertEqual(money?.currency, \"EUR\")\n    }\n    \n    func testCurrentMoneyWithInvalidAmount() {\n        let viewModel = TradeInputViewModel()\n        viewModel.amount = \"abc\"\n        XCTAssertNil(viewModel.currentMoney)\n    }\n\n    func testClear() {\n        let viewModel = TradeInputViewModel()\n        viewModel.amount = \"999\"\n        viewModel.currency = \"EUR\"\n        viewModel.clear()\n        XCTAssertEqual(viewModel.amount, \"\")\n        XCTAssertEqual(viewModel.currency, \"USD\")\n    }\n}\n",
    "Packages/ExploreFeature/Sources/Models/Asset.swift": "import Foundation\n\npublic struct Asset: Identifiable, Equatable, Codable, Hashable {\n    public let id: UUID\n    public let name: String\n    public let symbol: String\n    public let price: Decimal\n    \n    public init(id: UUID = UUID(), name: String, symbol: String, price: Decimal) {\n        self.id = id\n        self.name = name\n        self.symbol = symbol\n        self.price = price\n    }\n}\n",
    "Packages/ExploreFeature/Sources/ViewModels/AssetListViewModel.swift": "import Foundation\nimport Combine\n\npublic class AssetListViewModel: ObservableObject {\n    @Published public private(set) var assets: [Asset] = []\n    \n    public init() {\n        loadMockAssets()\n    }\n    \n    private func loadMockAssets() {\n        assets = [\n            Asset(name: \"Apple Inc.\", symbol: \"AAPL\", price: 179.32),\n            Asset(name: \"Tesla Inc.\", symbol: \"TSLA\", price: 266.12),\n            Asset(name: \"Amazon.com\", symbol: \"AMZN\", price: 124.78)\n        ]\n    }\n}\n",
    "Packages/ExploreFeature/Sources/Views/AssetListView.swift": "import SwiftUI\n\npublic struct AssetListView: View {\n    @ObservedObject private var viewModel: AssetListViewModel\n    \n    public init(viewModel: AssetListViewModel = AssetListViewModel()) {\n        self.viewModel = viewModel\n    }\n    \n    public var body: some View {\n        List(viewModel.assets) { asset in\n            HStack {\n                VStack(alignment: .leading) {\n                    Text(asset.name)\n                        .font(.headline)\n                    Text(asset.symbol)\n                        .font(.subheadline)\n                }\n                Spacer()\n                Text(\"$\\(asset.price, specifier: \"%.2f\")\")\n                    .font(.body)\n            }\n            .padding(.vertical, 4)\n        }\n        .navigationTitle(\"Assets\")\n    }\n}\n",
    "Packages/ExploreFeature/Sources/ExploreFeature.swift": "import SwiftUI\n\npublic struct ExploreFeatureEntryView: View {\n    public init() {}\n    public var body: some View {\n        NavigationView {\n            AssetListView()\n        }\n    }\n}"
}
